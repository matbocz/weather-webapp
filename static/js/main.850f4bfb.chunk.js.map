{"version":3,"sources":["components/Form.js","components/Result.js","components/Weather.js","components/App.js","serviceWorker.js","index.js","icons/search.svg"],"names":["Form","props","onSubmit","submit","className","id","placeholder","type","value","inputValue","onChange","change","aria-describedby","src","searchIcon","alt","Result","weather","error","city","description","temp","pressure","humidity","sunrise","sunset","wind","icon","errorMessage","content","iconURL","sunriseTime","Date","toLocaleTimeString","sunsetTime","toUpperCase","slice","Math","round","APIKey","Weather","state","handleChange","e","setState","target","handleSubmit","preventDefault","API","fetch","then","response","console","log","ok","Error","json","data","main","sys","speed","catch","err","this","Component","App","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.850f4bfb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport searchIcon from \"../icons/search.svg\";\r\n\r\nconst Form = (props) => (\r\n    <form onSubmit={props.submit} className=\"form-row mt-4\">\r\n        <div className=\"col-10\">\r\n            <div className=\"form-group\">\r\n                <input\r\n                    id=\"inputCity\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"Enter a city\"\r\n                    type=\"text\"\r\n                    value={props.inputValue}\r\n                    onChange={props.change}\r\n                    aria-describedby=\"helpCity\"\r\n                />\r\n                <small id=\"helpCity\" className=\"form-text text-muted\">\r\n                    Please enter a valid city name\r\n                </small>\r\n            </div>\r\n        </div>\r\n        <div className=\"col\">\r\n            <button className=\"btn btn-primary w-100\">\r\n                <img src={searchIcon} alt=\"Search\" />\r\n            </button>\r\n        </div>\r\n    </form>\r\n);\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Result = (props) => {\r\n    const {\r\n        error,\r\n        city,\r\n        description,\r\n        temp,\r\n        pressure,\r\n        humidity,\r\n        sunrise,\r\n        sunset,\r\n        wind,\r\n        icon,\r\n    } = props.weather;\r\n\r\n    const errorMessage = (\r\n        <>\r\n            <div className=\"card text-center mt-2\">\r\n                <h5 className=\"card-header\">{`City not found`}</h5>\r\n            </div>\r\n        </>\r\n    );\r\n\r\n    let content = null;\r\n\r\n    if (!error && city) {\r\n        const iconURL = \"http://openweathermap.org/img/wn/\" + icon + \"@2x.png\";\r\n\r\n        const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString(\r\n            \"en-US\"\r\n        );\r\n        const sunsetTime = new Date(sunset * 1000).toLocaleTimeString(\"en-US\");\r\n\r\n        content = (\r\n            <>\r\n                <div className=\"card text-center mt-2\">\r\n                    <h5 className=\"card-header\">Weather in {city}</h5>\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">\r\n                            {description[0].toUpperCase() +\r\n                                description.slice(1)}\r\n                        </h5>\r\n                        <img src={iconURL} alt=\"Weather icon\" />\r\n                    </div>\r\n                    <ul className=\"list-group list-group-flush\">\r\n                        <li className=\"list-group-item\">\r\n                            Temperature: {Math.round(temp)} Â°C\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            Pressure: {pressure} hpa\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            Humidity: {humidity} %\r\n                        </li>\r\n                        <li className=\"list-group-item\">Wind: {wind} m/s</li>\r\n                        <li className=\"list-group-item\">\r\n                            Sunrise: {sunriseTime}\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            Sunset: {sunsetTime}\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return <>{error ? errorMessage : content}</>;\r\n};\r\n\r\nexport default Result;\r\n","import React, { Component } from \"react\";\r\nimport Form from \"./Form\";\r\nimport Result from \"./Result\";\r\n\r\nconst APIKey = \"0ad8cfe8f31c124b14fb76eb2da3c25e\";\r\n\r\nclass Weather extends Component {\r\n    state = {\r\n        inputValue: \"\",\r\n        error: false,\r\n        city: \"\",\r\n        description: \"\",\r\n        temp: \"\",\r\n        pressure: \"\",\r\n        humidity: \"\",\r\n        sunrise: \"\",\r\n        sunset: \"\",\r\n        wind: \"\",\r\n        icon: \"\",\r\n    };\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            inputValue: e.target.value,\r\n        });\r\n    };\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.inputValue}&appid=${APIKey}&units=metric`;\r\n\r\n        fetch(API)\r\n            .then((response) => {\r\n                console.log(response);\r\n                if (response.ok) {\r\n                    return response;\r\n                }\r\n                throw Error(\"Response error\");\r\n            })\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                this.setState({\r\n                    error: false,\r\n                    city: this.state.inputValue,\r\n                    description: data.weather[0].description,\r\n                    temp: data.main.temp,\r\n                    pressure: data.main.pressure,\r\n                    humidity: data.main.humidity,\r\n                    sunrise: data.sys.sunrise,\r\n                    sunset: data.sys.sunset,\r\n                    wind: data.wind.speed,\r\n                    icon: data.weather[0].icon,\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n                this.setState({\r\n                    error: true,\r\n                    city: this.state.inputValue,\r\n                });\r\n            });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Form\r\n                    inputValue={this.state.inputValue}\r\n                    change={this.handleChange}\r\n                    submit={this.handleSubmit}\r\n                />\r\n\r\n                <Result weather={this.state} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Weather;\r\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootswatch/dist/superhero/bootstrap.min.css\";\nimport Weather from \"./Weather\";\n\nfunction App() {\n    return (\n        <div className=\"container\">\n            <Weather />\n\n            <footer className=\"fixed-bottom\">\n                <div className=\"text-center py-4 bg-primary text-white\">\n                    &copy; 2020 Copyright:\n                    <a href=\"https://github.com/matbocz\" className=\"text-white\">\n                        {\" \"}\n                        Mateusz Boczarski\n                    </a>\n                </div>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/search.5db892d8.svg\";"],"sourceRoot":""}